// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package email_test is a generated GoMock package.
package email_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/volam1999/gomail/internal/app/types"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(email *types.Email) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), email)
}

// FindAll mocks base method.
func (m *MockRepository) FindAll() (*[]types.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(*[]types.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository)(nil).FindAll))
}

// FindByEmailId mocks base method.
func (m *MockRepository) FindByEmailId(emailId string) (*types.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmailId", emailId)
	ret0, _ := ret[0].(*types.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmailId indicates an expected call of FindByEmailId.
func (mr *MockRepositoryMockRecorder) FindByEmailId(emailId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmailId", reflect.TypeOf((*MockRepository)(nil).FindByEmailId), emailId)
}
